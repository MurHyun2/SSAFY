1) 병합 정렬의 pseudocode 또는 java 코드를 작성하시오.

import java.util.Arrays;

public class Algo3_대전_04_이대현 {

	static int[] arr = { 2, 6, 4, 10, 31, 61, 25 };
	static int N = arr.length;
	static int[] temp = new int[N];

	public static void main(String[] args) {
		mergeSort(0, N - 1);

		System.out.println(Arrays.toString(arr));
	}

	private static void mergeSort(int left, int right) {
		if (left < right) {
			int mid = left / 2 + right / 2;
			mergeSort(left, mid);
			mergeSort(mid + 1, right);
			merge(left, mid, right);
		}
	}

	private static void merge(int left, int mid, int right) {
		int L = left;
		int R = mid + 1;
		int idx = left;

		while (L <= mid && R <= right) {
			if (arr[L] <= arr[R]) {
				temp[idx++] = arr[L++];
			} else {
				temp[idx++] = arr[R++];
			}
		}

		if (L <= mid) {
			for (int i = L; i <= mid; i++) {
				temp[idx++] = arr[i];
			}
		} else {
			for (int i = R; i <= right; i++) {
				temp[idx++] = arr[i];
			}
		}

		for (int i = left; i <= right; i++) {
			arr[i] = temp[i];
		}
	}
}


2) 병합 정렬의 특징을 아는 대로 서술하시오. (시간 복잡도, 공간 복잡도, 다른 정렬과의
비교, 구현상에 있어서의 특징 등)

병합 정렬은 NlogN의 시간 복잡도를 가지며 다른 정렬과 비교해서 보다 효율적으로 정렬을 수행할 수 있다.
병합 정렬의 핵심은 결국 배열을 계속 두 부분으로 계속 나눈 다음 최하단의 부분부터 다시 합치며 정렬을 수행한다.
그러기 위해서 재귀를 사용해 나누는 과정을 진행하고, 합치기 위해 merge() 메소드를 사용해 다시 나눈 부분들을 합친다.  